d <- clst_cas %>% left_join(CRISPRscope_blast_cluster_hit_type_2, by = c("clst" = "cluster")) %>% mutate(final_hit = replace_na(final_hit, "No hit"))
d %>% count(cas, final_hit) %>% group_by(cas) %>% mutate(total = sum(n)) %>% group_by(final_hit) %>% summarise(average_nbspacer_type = mean(n/total), sd_nbspacer_type = sd(n/total))
#TODO check if only ncbi spacers match ncbi bacteria
# Blast raw results
CRISPRblast_nt_2 %>%  select(qseqid, sseqid, database, stitle)
CRISPRscope_tbl_26 %>% select(cluster_spacer_identity, Organism, Strain )
#
bind_rows(CRISPRblast_IMGVR_2, CRISPRblast_nt_2, CRISPRblast_PLSDB_2) %>%
filter(qseqid %in% CRISPRscope_blast_cluster_hit_type_2$cluster) %>% ggplot(aes(x=pident)) + geom_bar(width = 0.1)
bind_rows(CRISPRblast_IMGVR_2, CRISPRblast_nt_2, CRISPRblast_PLSDB_2) %>%
filter(qseqid %in% CRISPRscope_blast_cluster_hit_type_2$cluster) %>% ggplot(aes(x=mismatch)) + geom_bar(width = 0.3)
bind_rows(CRISPRblast_IMGVR_2, CRISPRblast_nt_2, CRISPRblast_PLSDB_2) %>%
filter(qseqid %in% CRISPRscope_blast_cluster_hit_type_2$cluster) %>% summarise(min_mismatch = min(mismatch),
max_mismatch = max(mismatch),
mean = mean(mismatch),
sd = sd(mismatch))
IMGVR_all_Sequence_information <- read_delim(paste(data_folder, "/DB/IMGVR/IMG_VR_2020-10-12_5.1/IMGVR_all_Sequence_information.tsv", sep=""),
"\t", escape_double = FALSE, trim_ws = TRUE)
IMGVR_all_Host_information <- read_delim(paste(data_folder, "/DB/IMGVR/IMG_VR_2020-10-12_5.1/IMGVR_all_Host_information.tsv", sep=""),
"\t", escape_double = FALSE, trim_ws = TRUE)
all_hits <- bind_rows(CRISPRblast_IMGVR_2, CRISPRblast_nt_2, CRISPRblast_PLSDB_2) %>%
filter(qseqid %in% CRISPRscope_blast_cluster_hit_type_2$cluster) %>%
filter(database == "IMGVR") # Maybe missin gorigin (gen meta)
# all_hits <- bind_rows(genome_blast_hits %>% mutate(origin = "genomic"),
#                       metagenome_blast_hits %>% mutate(origin = "metagenomic")) %>%
#   filter(blast_database == "IMGVR") %>%
#   select(qseqid, sseqid, pident, origin, )
#
joined_IMGVR <- all_hits %>%
mutate(sseqid = str_extract(sseqid, "^[^|]+")) %>%
left_join(IMGVR_all_Sequence_information, by = c("sseqid" = "## UViG")) %>%
select(qseqid,sseqid, pident, Taxon_oid, Scaffold_oid, `Coordinates ('whole' if the UViG is the entire contig)`,
`Ecosystem classification`, vOTU, Length, Topology, `Estimated completeness`, `MIUViG quality`,
`Gene content (total genes;cds;tRNA;VPF percentage)`, `Taxonomic classification`,
`Taxonomic classification method`, `Sequence origin (doi)`) %>%
distinct() %>%
left_join(IMGVR_all_Host_information, by = c("sseqid" = "## UViG"))
write.csv(joined_IMGVR, file = paste(data_folder, "/EXPORT/IMGVR_Hits_join.csv", sep=""), row.names = F)
joined_IMGVR <- read.csv( file = paste(data_folder, "/EXPORT/IMGVR_Hits_join.csv", sep=""))
library(patchwork)
# num_of_vOTUs_per_taxon <- read_csv(paste(data_folder, "/IMPORT/IMG_Hits/num_of_vOTUs_per_taxon.csv", sep = ""))
# UViG_match_table <- read_csv(paste(data_folder, "/IMPORT/IMG_Hits/UViG_match_table.csv", sep = ""))
# Hits in IMGVR -> sequences informations
# Contains cluster_spacer_id and the matching information in IMGVR
joined_IMGVR <- read.csv( file = paste(data_folder, "/EXPORT/IMGVR_Hits_join.csv", sep=""))
# Organism - Votu : For each organism, the votu's associated.
asdf <- CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>% select(Organism, vOTU) %>% distinct() %>% mutate(Organism = gsub("_", " ", Organism))
# Without the distinct, we keep the record of the number of spacers.
# Organism - Strain - cluster_spacer_identity - vOTU (with duplicates)
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism)) %>%
write_csv(file = paste(data_folder, "/EXPORT/fraction_votu_per_strain_duplicates.csv", sep=""), col_names = T)
# Host - vOTU from IMGVR
# IMGBR sequence and host information files, merged
# and subsetted for our 26 species (host)
vOTUS_in_which_species <- read_csv(paste(data_folder, "/IMPORT/IMG_Hits/vOTUS_in_which_species.csv", sep=""))
vOTUS_in_which_species <- vOTUS_in_which_species %>% mutate(Organism = taxon) %>% select(Organism, vOTU)
# Totals
total_votus_per_species <-  rbind(asdf, vOTUS_in_which_species) %>% distinct() %>% group_by(Organism) %>% summarise(n_votus_per_total = n())
genomic_votu_per_species <- asdf  %>% distinct() %>% group_by(Organism) %>% summarise(n_votus_per_org = n())
# Pan immunity
fraction_votu_per_species <- left_join(total_votus_per_species, genomic_votu_per_species, by=c("Organism")) %>% mutate(fraction = 100*n_votus_per_org/n_votus_per_total)
fraction_votu_per_species %>% write_csv(file = paste(data_folder, "/EXPORT/fraction_votu_per_species.csv", sep=""), col_names = T)
# per strain
fraction_votu_per_strain <- CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>% select(-cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>% group_by(Organism, Strain) %>%
summarise(nb_votus_per_strain = n()) %>%
mutate(Organism = gsub("_", " ", Organism)) %>%
left_join(total_votus_per_species, by=c("Organism")) %>%
mutate(fraction = 100*nb_votus_per_strain/n_votus_per_total)
fraction_votu_per_strain %>% write_csv(file = paste(data_folder, "/EXPORT/fraction_votu_per_strain.csv", sep=""), col_names = T)
fraction_votu_per_species <- read_csv(file = paste(data_folder, "/EXPORT/fraction_votu_per_species.csv", sep=""), col_names = T)
fraction_votu_per_strain <- read_csv(file = paste(data_folder, "/EXPORT/fraction_votu_per_strain.csv", sep=""), col_names = T)
#-----------
aaaplt <- fraction_votu_per_species %>% ggplot(aes(x=Organism, y=fraction)) +
geom_bar(stat = "identity") +
theme_classic() +
ylim(0,100) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+ coord_flip()
# How many of these votus are targeted by one single strain.
bbbplt <- fraction_votu_per_strain %>%
ggplot(aes(x=Organism, y=fraction)) +
geom_boxplot()+
ylim(0,100) +
theme_classic() +
xlab("")+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) + coord_flip()
aaaplt + bbbplt +
plot_layout(widths =  c(1,1))
#
fraction_votu_per_strain %>% summarise(mean_votu = mean(nb_votus_per_strain)) #10.82332
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% group_by(Organism, Strain, vOTU) %>% summarise(count_of_spacers = n()) %>%
ggplot(aes(x=count_of_spacers)) +
geom_histogram()
#
joined_IMGVR_hosts <- joined_IMGVR %>%
separate(Host.taxonomy.prediction, into = c("1","2","3","4","5","6","HostSpecies"), sep=";") %>%
select(qseqid, vOTU, HostSpecies)
# Metagenomic votus targeted
# Project - votu
megagenomic_project_votu <- CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>% select(ProjectID, vOTU) %>% distinct() %>% arrange(ProjectID)
# Same at sample level
megagenomic_project_sample_votu <- CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>% select(ProjectID, SRA_ID, vOTU) %>% distinct() %>% arrange(ProjectID)
# All available Sterm votu
# Organism - votu
votu_in_which_species_sterm <- vOTUS_in_which_species %>% filter(Organism == "Streptococcus thermophilus")
votu_in_which_species_sterm.list <- votu_in_which_species_sterm$vOTU
megagenomic_project_votu %>% group_by(ProjectID) %>% summarise(nb_votu_per_project = n())
megagenomic_project_votu %>% mutate(sterm = ifelse(vOTU %in% votu_in_which_species_sterm$vOTU, "sterm", "unknown"))
megagenomic_project_votu %>% mutate(sterm = ifelse(vOTU %in% votu_in_which_species_sterm$vOTU, "sterm", "unknown")) %>% group_by(ProjectID) %>%
summarise(total_votu = n())
# Per project
meta_votu_project <- megagenomic_project_votu %>% mutate(sterm = ifelse(vOTU %in% votu_in_which_species_sterm$vOTU, "sterm", "unknown")) %>% group_by(ProjectID, sterm) %>%
summarise(total_votu_sterm_project = n()) %>% filter(sterm == "sterm") %>%
select(-sterm) %>% mutate(total_sterm_in_imgvr = length(votu_in_which_species_sterm$vOTU)) %>%
mutate(fraction_project = 100* total_votu_sterm_project/total_sterm_in_imgvr)
# Per samples
megagenomic_project_sample_votu %>% mutate(sterm = ifelse(vOTU %in% votu_in_which_species_sterm$vOTU, "sterm", "unknown")) %>%
group_by(ProjectID, SRA_ID, sterm) %>%
summarise(total_votu_sterm_sample = n()) %>%
filter(sterm == "sterm") %>%
select(-sterm) %>% mutate(total_sterm_in_imgvr = length(votu_in_which_species_sterm$vOTU)) %>%
mutate(fraction_sample = 100* total_votu_sterm_sample/total_sterm_in_imgvr) %>%
left_join(meta_votu_project %>% select(ProjectID, total_votu_sterm_project, fraction_project), by = c("ProjectID")) %>%
select(ProjectID, SRA_ID, total_sterm_in_imgvr, total_votu_sterm_project, fraction_project, total_votu_sterm_sample, fraction_sample) %>%
write_csv(file = paste(data_folder, "/EXPORT/VOTUs_metagenomes_per_sample.csv", sep=""))
# To have 'per project' add %>% select(ProjectID, total_sterm_in_imgvr, total_votu_sterm_project, fraction_project) %>% distinct()
metagenomic_votu_sterm = read_csv(file = paste(data_folder, "/EXPORT/VOTUs_metagenomes_per_sample.csv", sep=""))
# How many votu does one spacer target
joined_IMGVR %>% select(qseqid, vOTU) %>% distinct() %>%
group_by(qseqid) %>%
summarise(n_target_votu = n()) %>%
count(n_target_votu)
# Focus on S. therm.
votu_sterm_projects <- CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
left_join(joined_IMGVR_hosts %>%
filter(HostSpecies == "Streptococcus thermophilus") %>%
distinct(),
by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
renameSamples() %>%
left_join(joined_IMGVR %>% select(vOTU, Taxonomic.classification) %>% distinct(), by=c("vOTU")) %>%
distinct()
# Total sterm votu targeted by our metagenomes: 135
votu_sterm_projects %>% select(vOTU) %>% distinct()
# Total sterm votu in IMGVR: 225
joined_IMGVR_hosts %>%
filter(HostSpecies == "Streptococcus thermophilus") %>%
select(vOTU) %>%
distinct()
# Same - without filter - to file
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
left_join(joined_IMGVR_hosts %>%
distinct(),
by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
renameSamples() %>%
left_join(joined_IMGVR %>% select(vOTU, Taxonomic.classification) %>% distinct(), by=c("vOTU")) %>%
distinct() %>% write_csv(file = paste(data_folder, "/EXPORT/vOTU_per_sample.csv", sep=""))
# Total votu in IMG
#IMGVR_all_Sequence_information %>% select(vOTU) %>% distinct() # 935,362
# Total v otu for metagenomes
votu_total_projects <- CRISPRscope_meta_tbl_filtered %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU), by=c("cluster_spacer_identity" = "qseqid")) %>%
renameSamples() %>%
group_by(ProjectID) %>%
summarise(ProjectID = ProjectID, total_spacers_with_IMG_hit = n(), total_votu = n_distinct(vOTU)) %>% distinct()
# S.therm votus for metagenomes
votu_sterm_project_count <- votu_sterm_projects %>% group_by(ProjectID) %>%
summarise(ProjectID = ProjectID, total_spacers_with_sterm_IMG_hit = n(), total_distinct_sterm_votu = n_distinct(vOTU)) %>% distinct()
# Fraction of votu targeted by stherm in thermophilic samples
stermvotu <- votu_sterm_project_count %>% filter(ProjectID == "Walsh et al. 2020" | ProjectID == "Swiss starter culture" | ProjectID == "Swiss raclette")%>%
mutate(fraction = 100*(total_distinct_sterm_votu/total_spacers_with_sterm_IMG_hit))
mean(stermvotu$fraction) #19.03
sd(stermvotu$fraction)   # 8.35
# ...
asdf <- votu_sterm_project_count %>%
mutate(fraction = 100*(total_distinct_sterm_votu/total_spacers_with_sterm_IMG_hit))
sd(asdf$fraction)
#
meta_votu_sterm <- votu_total_projects %>% left_join(votu_sterm_project_count, by=c("ProjectID")) %>%
mutate(fraction = total_distinct_sterm_votu/total_spacers_with_sterm_IMG_hit)
# TODO: proportion of votu targeted by all projects and all samples
all_meta_votu <- CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>% select(vOTU) %>% distinct() # 1'088
CRISPR_spacer_coveragez <- read_csv(file = paste(data_folder, "/IMPORT_EXPORT/DR_SP_DR_results_zeroes.csv", sep=""), col_names = T)
# Firstly, get cluster number from Spacer ID
drspdr <- CRISPR_spacer_coveragez %>% left_join(CRISPRscope_meta_tbl_filtered %>%
unite(spacer_name, ProjectID, SRA_ID, GID, SPID, Coverage, sep="_") %>%
select(spacer_name, cluster_spacer_identity), by = c("spacer_name") )
# CheeseRaclette_1985_G15_SP3_2
CRISPRscope_meta_tbl_filtered %>% filter(GID == "G15")
# Spacer cluster/ hit type (viral bacterial Nohit)
#meta_hit_type_id <- bind_rows(meta_hits, meta_no_hits) %>% select(qseqid, hit_type) %>% distinct()
# Vincent
drspdr %>% right_join(CRISPRscope_blast_cluster_hit_type_2_completed, by = c("cluster_spacer_identity" = "cluster"))
drspdr_hit <- drspdr %>% left_join(CRISPRscope_blast_cluster_hit_type_2_completed, by = c("cluster_spacer_identity" = "cluster"))
#View(drspdr_hit)
drspdr_hit %>% write_csv(file="./meta_sp_protosp_coverage_hits.csv")
# Plot
my.formula <- y ~ x
library(ggpmisc)
plot <-
ggplot(drspdr_hit, aes(x = spacer_CPM, y = protospacer_CPM)) +
geom_point(alpha = 0.7, size = 0.2) + #aes(color= Subtype),
#scale_color_viridis_d() +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
labs(x = "spacer [cpm]", y = "protospacers  [cpm]") +
#geom_point(aes(fill = Subtype),alpha = 0.4, size = 0.2) +
geom_smooth(method = "lm", se = FALSE) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE, ) +
theme_bw() +
theme(
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
legend.text = element_text(color = "black", size = 14),
legend.title = element_text(color = "black", size = 14),
axis.text.x = element_text(
angle = 45,
hjust = 1,
color = "black"
),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
axis.line.y.left = element_line(color = "black"),
axis.line.y.right = element_line(color = "black"),
axis.line.x = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
plot.title = element_text(color = "black"),
panel.background = element_rect(fill = "white", colour = NA),
plot.background = element_rect(fill = "white", colour = NA),
legend.position = "top",
legend.background = element_rect(fill = "white", colour = NA),
legend.box.background = element_rect(fill = "white", colour = NA),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
#panel.grid.major = element_line(color = "black", size = 0.1),
#panel.grid.minor = element_line(color = "black", size = 0.1),
strip.background = element_rect(
color = "black",
fill = "White",
size = 0.5,
linetype = "solid"
),
strip.text = element_text(color = "black")
) +
facet_wrap(~final_hit)
# ggsave(
#   plot = plot,
#   file = paste(google_drive_folder, "/15_SpacerProtospacerAbundance_HIT_TYPE.pdf", sep = ""),
#   bg = "white",
#   width = 15,
#   height = 25,
#   units = "cm",
#   dpi = 800
# )
plot
CRISPR_spacer_coverage_2 <-  read_csv(paste(data_folder, "/IMPORT_EXPORT/DR_SP_DR_results.csv", sep="")) %>%
mutate(ProjectID = bioproject) %>%
renameSamples()
# Firstly, get cluster number from Spacer ID
drspdr_type <- CRISPR_spacer_coverage %>% left_join(CRISPRscope_meta_tbl_filtered %>%
unite(spacer_name, ProjectID, SRA_ID, GID, SPID, Coverage, sep="_") %>%
select(spacer_name, cluster_spacer_identity), by = c("spacer_name") ) %>%
mutate(ProjectID = bioproject) %>% renameSamples() %>%
mutate(type = ifelse(ProjectID == "Swiss raclette", "Mesophilic", NA)) %>%
mutate(type = ifelse(ProjectID == "Lordan et al. 2019", "Mesophilic", type)) %>%
mutate(type = ifelse(ProjectID == "Walsh et al. 2020", "Mesophilic", type)) %>%
mutate(type = ifelse(ProjectID == "Swiss starter culture", "Thermophilic", type)) %>%
mutate(type = ifelse(ProjectID == "Pasolli et al. 2020", "Thermophilic", type))
fraction_votu_per_strain
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism))
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism))
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na()
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism))
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na()
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism)) %>%
select(cluster_spacer_identity, vOTU)
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(), by = c("cluster_spacer_identity" = "qseqid")) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU)
bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism)) %>%
select(cluster_spacer_identity, vOTU),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU)
) %>% distinct()
# Cluster - Cas_type dict
bind_rows(CRISPRscope_tbl_26 %>% select(cluster_spacer_identity, Cas_subtype) %>% distinct(),
CRISPRscope_meta_tbl_filtered %>% select(cluster_spacer_identity, Cas_subtype) %>% distinct()) %>%
distinct()
CRISPRscope_meta_tbl_filtered
# Cluster - Cas_type dict
bind_rows(CRISPRscope_tbl_26 %>% select(cluster_spacer_identity, Cas_subtype) %>% distinct(),
CRISPRscope_meta_tbl_filtered %>% select(cluster_spacer_identity, Subtype) %>% distinct() %>% dplyr::rename(Cas_subtype = Subtype)) %>%
distinct()
# Cluster - Cas_type dict
spacer_cluster_subtype_dict <- bind_rows(CRISPRscope_tbl_26 %>% select(cluster_spacer_identity, Cas_subtype) %>% distinct(),
CRISPRscope_meta_tbl_filtered %>% select(cluster_spacer_identity, Subtype) %>% distinct() %>% dplyr::rename(Cas_subtype = Subtype)) %>%
distinct()
bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism)) %>%
select(cluster_spacer_identity, vOTU),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU)
) %>% distinct() %>%
left_join(spacer_cluster_subtype_dict, by=c("cluster_spacer_identity"))
joined_IMGVR
joined_IMGVR
# All spacers with votu
bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU, Taxonomic.classification, Host.taxonomy.prediction) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>% mutate(Organism = gsub("_", " ", Organism)) %>%
select(cluster_spacer_identity, vOTU),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU, Taxonomic.classification, Host.taxonomy.prediction) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU)
) %>% distinct() %>%
left_join(spacer_cluster_subtype_dict, by=c("cluster_spacer_identity"))
# All spacers with votu
bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU, Taxonomic.classification, Host.taxonomy.prediction) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification, Host.taxonomy.prediction),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU, Taxonomic.classification, Host.taxonomy.prediction) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification, Host.taxonomy.prediction)
) %>% distinct() %>%
left_join(spacer_cluster_subtype_dict, by=c("cluster_spacer_identity"))
# All spacers with votu
bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU, Taxonomic.classification, Host.taxonomy.prediction) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification, Host.taxonomy.prediction),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU, Taxonomic.classification, Host.taxonomy.prediction) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification, Host.taxonomy.prediction)
) %>% distinct() %>%
left_join(spacer_cluster_subtype_dict, by=c("cluster_spacer_identity")) %>%
relocate(Cas_subtype, .after = vOTU)
# All spacers with votu
bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU, Taxonomic.classification) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU, Taxonomic.classification) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification)
) %>% distinct() %>%
left_join(spacer_cluster_subtype_dict, by=c("cluster_spacer_identity")) %>%
relocate(Cas_subtype, .after = vOTU)
# All spacers with votu
sp_votu_casSubtype <- bind_rows(
CRISPRscope_tbl_26 %>% select(Organism, Strain, cluster_spacer_identity) %>%
left_join(
joined_IMGVR %>% select(qseqid, vOTU, Taxonomic.classification) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification),
CRISPRscope_meta_tbl_filtered %>% select(ProjectID, SRA_ID, cluster_spacer_identity) %>%
renameSamples() %>%
left_join(
joined_IMGVR %>%  select(qseqid, vOTU, Taxonomic.classification) %>% distinct(),
by = c("cluster_spacer_identity" = "qseqid")
) %>%
arrange(cluster_spacer_identity) %>%
distinct() %>%
drop_na() %>%
select(cluster_spacer_identity, vOTU, Taxonomic.classification)
) %>% distinct() %>%
left_join(spacer_cluster_subtype_dict, by=c("cluster_spacer_identity")) %>%
relocate(Cas_subtype, .after = vOTU)
View(sp_votu_casSubtype)
sp_votu_casSubtype %>% write_csv(file="./sp_votu_casSubtype.csv")
sp_votu_casSubtype
